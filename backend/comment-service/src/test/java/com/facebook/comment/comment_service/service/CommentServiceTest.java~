package com.facebook.comment.comment_service.service;

import com.facebook.comment.comment_service.dao.CommentRepository;
import com.facebook.comment.comment_service.dto.CommentCreateDTO;
import com.facebook.comment.comment_service.dto.CommentDTO;
import com.facebook.comment.comment_service.dto.CommentUpdateDTO;
import com.facebook.comment.comment_service.entity.Comment;
import com.facebook.comment.comment_service.exception.ResourceNotFoundException;
import com.facebook.comment.comment_service.service.impl.CommentServiceImpl;
import com.facebook.comment.comment_service.util.CommentMapper;
import org.junit.jupiter.api.BeforeEach;
import org.junit.jupiter.api.DisplayName;
import org.junit.jupiter.api.Test;
import org.junit.jupiter.api.extension.ExtendWith;
import org.mockito.InjectMocks;
import org.mockito.Mock;
import org.mockito.junit.jupiter.MockitoExtension;

import java.time.LocalDateTime;
import java.util.Arrays;
import java.util.List;
import java.util.Optional;

import static org.junit.jupiter.api.Assertions.*;
import static org.mockito.ArgumentMatchers.any;
import static org.mockito.Mockito.*;

@ExtendWith(MockitoExtension.class)
public class CommentServiceTest {

    @Mock
    private CommentRepository commentRepository;

    @Mock
    private CommentMapper commentMapper;

    @InjectMocks
    private CommentServiceImpl commentService;

    private Comment comment;
    private CommentDTO commentDTO;
    private CommentCreateDTO commentCreateDTO;
    private CommentUpdateDTO commentUpdateDTO;

    @BeforeEach
    void setUp() {
        // Inițializare comment
        comment = new Comment();
        comment.setId(1L);
        comment.setPostId(1L);
        comment.setAuthorId(2L);
        comment.setText("Test comment");
        comment.setScore(5.0f);
        comment.setPictureUrl("http://example.com/image.jpg");
        comment.setCreatedAt(LocalDateTime.now());

        // Inițializare commentDTO
        commentDTO = new CommentDTO();
        commentDTO.setId(1L);
        commentDTO.setPostId(1L);
        commentDTO.setAuthorId(2L);
        commentDTO.setText("Test comment");
        commentDTO.setScore(5.0f);
        commentDTO.setPictureUrl("http://example.com/image.jpg");
        commentDTO.setCreatedAt(comment.getCreatedAt());
        commentDTO.setAuthorUsername("testUser");

        // Inițializare commentCreateDTO
        commentCreateDTO = new CommentCreateDTO();
        commentCreateDTO.setPostId(1L);
        commentCreateDTO.setAuthorId(2L);
        commentCreateDTO.setText("Test comment");
        commentCreateDTO.setPictureUrl("http://example.com/image.jpg");

        // Inițializare commentUpdateDTO
        commentUpdateDTO = new CommentUpdateDTO();
        commentUpdateDTO.setText("Updated comment");
        commentUpdateDTO.setPictureUrl("http://example.com/updated-image.jpg");
    }

    @Test
    @DisplayName("Test pentru crearea unui comentariu")
    void testCreateComment() {
        // Arrange
        when(commentMapper.toEntity(any(CommentCreateDTO.class))).thenReturn(comment);
        when(commentRepository.save(any(Comment.class))).thenReturn(comment);
        when(commentMapper.toDTO(any(Comment.class))).thenReturn(commentDTO);

        // Act
        CommentDTO result = commentService.createComment(commentCreateDTO);

        // Assert
        assertNotNull(result);
        assertEquals(commentDTO.getId(), result.getId());
        assertEquals(commentDTO.getText(), result.getText());
        verify(commentRepository, times(1)).save(any(Comment.class));
    }

    @Test
    @DisplayName("Test pentru obținerea comentariilor după ID-ul postării")
    void testGetCommentsByPostId() {
        // Arrange
        List<Comment> comments = Arrays.asList(comment);
        when(commentRepository.findByPostIdOrderByCreatedAtDesc(anyLong())).thenReturn(comments);
        when(commentMapper.toDTO(any(Comment.class))).thenReturn(commentDTO);

        // Act
        List<CommentDTO> result = commentService.getCommentsByPostId(1L);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(commentDTO.getId(), result.get(0).getId());
        verify(commentRepository, times(1)).findByPostIdOrderByCreatedAtDesc(anyLong());
    }

    @Test
    @DisplayName("Test pentru obținerea unui comentariu după ID")
    void testGetCommentById() {
        // Arrange
        when(commentRepository.findById(anyLong())).thenReturn(Optional.of(comment));
        when(commentMapper.toDTO(any(Comment.class))).thenReturn(commentDTO);

        // Act
        CommentDTO result = commentService.getCommentById(1L);

        // Assert
        assertNotNull(result);
        assertEquals(commentDTO.getId(), result.getId());
        verify(commentRepository, times(1)).findById(anyLong());
    }

    @Test
    @DisplayName("Test pentru obținerea unui comentariu după ID inexistent")
    void testGetCommentByIdNotFound() {
        // Arrange
        when(commentRepository.findById(anyLong())).thenReturn(Optional.empty());

        // Act & Assert
        assertThrows(ResourceNotFoundException.class, () -> {
            commentService.getCommentById(999L);
        });
        verify(commentRepository, times(1)).findById(anyLong());
    }

    @Test
    @DisplayName("Test pentru actualizarea unui comentariu")
    void testUpdateComment() {
        // Arrange
        Comment updatedComment = new Comment();
        updatedComment.setId(1L);
        updatedComment.setPostId(1L);
        updatedComment.setAuthorId(2L);
        updatedComment.setText("Updated comment");
        updatedComment.setScore(5.0f);
        updatedComment.setPictureUrl("http://example.com/updated-image.jpg");
        updatedComment.setCreatedAt(comment.getCreatedAt());

        CommentDTO updatedCommentDTO = new CommentDTO();
        updatedCommentDTO.setId(1L);
        updatedCommentDTO.setPostId(1L);
        updatedCommentDTO.setAuthorId(2L);
        updatedCommentDTO.setText("Updated comment");
        updatedCommentDTO.setScore(5.0f);
        updatedCommentDTO.setPictureUrl("http://example.com/updated-image.jpg");
        updatedCommentDTO.setCreatedAt(comment.getCreatedAt());
        updatedCommentDTO.setAuthorUsername("testUser");

        when(commentRepository.findById(anyLong())).thenReturn(Optional.of(comment));
        when(commentRepository.save(any(Comment.class))).thenReturn(updatedComment);
        when(commentMapper.toDTO(any(Comment.class))).thenReturn(updatedCommentDTO);

        // Act
        CommentDTO result = commentService.updateComment(1L, commentUpdateDTO);

        // Assert
        assertNotNull(result);
        assertEquals("Updated comment", result.getText());
        assertEquals("http://example.com/updated-image.jpg", result.getPictureUrl());
        verify(commentRepository, times(1)).findById(anyLong());
        verify(commentRepository, times(1)).save(any(Comment.class));
    }

    @Test
    @DisplayName("Test pentru ștergerea unui comentariu")
    void testDeleteComment() {
        // Arrange
        when(commentRepository.existsById(anyLong())).thenReturn(true);
        doNothing().when(commentRepository).deleteById(anyLong());

        // Act
        commentService.deleteComment(1L);

        // Assert
        verify(commentRepository, times(1)).existsById(anyLong());
        verify(commentRepository, times(1)).deleteById(anyLong());
    }

    @Test
    @DisplayName("Test pentru ștergerea unui comentariu inexistent")
    void testDeleteCommentNotFound() {
        // Arrange
        when(commentRepository.existsById(anyLong())).thenReturn(false);

        // Act & Assert
        assertThrows(ResourceNotFoundException.class, () -> {
            commentService.deleteComment(999L);
        });
        verify(commentRepository, times(1)).existsById(anyLong());
        verify(commentRepository, never()).deleteById(anyLong());
    }

    @Test
    @DisplayName("Test pentru obținerea comentariilor sortate după scor")
    void testGetCommentsByPostIdSortedByScore() {
        // Arrange
        List<Comment> comments = Arrays.asList(comment);
        when(commentRepository.findByPostIdOrderByScoreDesc(anyLong())).thenReturn(comments);
        when(commentMapper.toDTO(any(Comment.class))).thenReturn(commentDTO);

        // Act
        List<CommentDTO> result = commentService.getCommentsByPostIdSortedByScore(1L);

        // Assert
        assertNotNull(result);
        assertEquals(1, result.size());
        assertEquals(commentDTO.getId(), result.get(0).getId());
        verify(commentRepository, times(1)).findByPostIdOrderByScoreDesc(anyLong());
    }
} 